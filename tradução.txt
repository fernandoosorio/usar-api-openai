HumanEval/0Tradução= Verifique se, na lista de números fornecida, existem dois números mais próximos um do outro do que o limite dado.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
HumanEval/1Tradução= A entrada para esta função é uma string contendo vários grupos de parênteses aninhados. Seu objetivo é separar esses grupos em strings separadas e retornar a lista deles. Os grupos separados são equilibrados (cada parêntese aberto é fechado corretamente) e não aninhados uns dentro dos outros. Ignore quaisquer espaços na string de entrada. 
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
HumanEval/2Tradução= Dado um número positivo de ponto flutuante, ele pode ser decomposto em uma parte inteira (maior inteiro menor que o número dado) e decimais (parte restante sempre menor que 1).

Retorne a parte decimal do número.
>>> truncar_numero(3.5)
0.5
HumanEval/3Tradução= Você recebe uma lista de operações de depósito e retirada em uma conta bancária que começa com um saldo zero. Sua tarefa é detectar se em algum momento o saldo da conta cai abaixo de zero e, nesse ponto, a função deve retornar True. Caso contrário, ela deve retornar False.
    >>> abaixo_zero([1, 2, 3])
    False
    >>> abaixo_zero([1, 2, -4, 5])
    True
HumanEval/4Tradução= Para uma lista dada de números de entrada, calcule o Desvio Absoluto Médio em relação à média desse conjunto de dados.
O Desvio Absoluto Médio é a média da diferença absoluta entre cada elemento e um ponto central (média neste caso):
MAD = média | x - x_média |
>>> desvio_absoluto_medio([1.0, 2.0, 3.0, 4.0])
1.0
HumanEval/5Tradução= Insira um número 'delimeter' entre cada dois elementos consecutivos da lista de entrada `numbers'
    >>> interspersar([], 4)
    []
    >>> interspersar([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    .
HumanEval/6Tradução= A entrada para esta função é uma string representando múltiplos grupos de parênteses aninhados separados por espaços.
Para cada um dos grupos, a saída é o nível mais profundo de aninhamento de parênteses.
Por exemplo, (()()) tem dois níveis de aninhamento enquanto ((())) tem três.

>>> parse_nested_parens('(()()) ((())) () ((())()())')
[2, 3, 1, 3]
HumanEval/7Tradução= Filtrar uma lista de entrada de strings apenas para aquelas que contêm uma determinada substring
    >>> filtrar_por_substring([], 'a')
    []
    >>> filtrar_por_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
HumanEval/8Tradução= Para uma determinada lista de números inteiros, retorne uma tupla consistindo da soma e do produto de todos os números inteiros na lista. A soma vazia deve ser igual a 0 e o produto vazio deve ser igual a 1.

Exemplo de entrada e saída:

>>> sum_product([])
(0, 1)

>>> sum_product([1, 2, 3, 4])
(10, 24)
HumanEval/9Tradução= A partir de uma lista de números inteiros, gere uma lista do elemento máximo encontrado até o momento na sequência.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4].
HumanEval/10Tradução= Teste se a string dada é um palíndromo.
HumanEval/11Tradução= Entrada são duas strings a e b, consistindo apenas de 1s e 0s.
Realize a operação binária XOR nessas entradas e retorne o resultado também como uma string.
>>> string_xor('010', '110')
'100'
HumanEval/12Tradução= A partir de uma lista de strings, retorne a mais longa. Em caso de várias strings do mesmo comprimento, retorne a primeira. Retorne None caso a lista de entrada esteja vazia.
    >>> mais_longa([])

    >>> mais_longa(['a', 'b', 'c'])
    'a'
    >>> mais_longa(['a', 'bb', 'ccc'])
    'ccc'
HumanEval/13Tradução= Retorne o maior divisor comum de dois números inteiros a e b
    >>> maior_divisor_comum(3, 5)
    1
    >>> maior_divisor_comum(25, 15)
    5
HumanEval/14Tradução= Retornar lista de todos os prefixos do mais curto para o mais longo da string de entrada
    >>> todos_prefixos('abc')
    ['a', 'ab', 'abc']
HumanEval/15Tradução= Retorne uma string contendo números separados por espaços, começando do 0 até n, incluindo o próprio n.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    .
HumanEval/16Tradução= Dada uma string, descubra quantos caracteres distintos (independentemente de maiúsculas ou minúsculas) ela consiste.
   >>> count_distinct_characters('xyzXYZ')
   3
   >>> count_distinct_characters('Jerry')
   4
HumanEval/17Tradução= A entrada para esta função é uma string que representa notas musicais em um formato especial ASCII.
Sua tarefa é analisar essa string e retornar uma lista de inteiros correspondentes a quantas batidas cada nota dura.

Aqui está uma legenda:
'o' - nota inteira, dura quatro batidas
'o|' - meia nota, dura duas batidas
'.|' - quarto de nota, dura uma batida

>>> parse_music('o o| .| o| o| .| .| .| .| o o')
[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
HumanEval/18Tradução= Encontre quantas vezes uma determinada substring pode ser encontrada na string original. Conte casos de sobreposição.

    >>> quantas_vezes('', 'a')
    0
    >>> quantas_vezes('aaa', 'a')
    3
    >>> quantas_vezes('aaaa', 'aa')
    3
HumanEval/19Tradução= A entrada é uma string separada por espaços contendo números de 'zero' a 'nove'.
As opções válidas são 'zero', 'um', 'dois', 'três', 'quatro', 'cinco', 'seis', 'sete', 'oito' e 'nove'.
Retorne a string com os números ordenados do menor para o maior
>>> sort_numbers('três um cinco')
'um três cinco'
HumanEval/20Tradução= A partir de uma lista fornecida de números (de comprimento pelo menos dois), selecione e retorne dois que estão mais próximos um do outro e retorne-os na ordem (número menor, número maior).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    .
HumanEval/21Tradução= Dada uma lista de números (com pelo menos dois elementos), aplique uma transformação linear a essa lista, de modo que o menor número se torne 0 e o maior se torne 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
HumanEval/22Tradução= Filtrar a lista dada de quaisquer valores em Python apenas para inteiros
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
HumanEval/23Tradução= Retorne o comprimento da string fornecida
   >>> len('')
   0
   >>> len('abc')
   3
HumanEval/24Tradução= Para um determinado número n, encontre o maior número que divide n de forma igual, menor que n.
    >>> maior_divisor(15)
    5
HumanEval/25Tradução= Retorne a lista de fatores primos do número inteiro dado em ordem do menor para o maior.
Cada fator deve ser listado o número de vezes correspondente a quantas vezes ele aparece na fatoração.
O número de entrada deve ser igual ao produto de todos os fatores
>>> fatorar(8)
[2, 2, 2]
>>> fatorar(25)
[5, 5]
>>> fatorar(70)
[2, 5, 7]
HumanEval/26Tradução= De uma lista de inteiros, remova todos os elementos que ocorrem mais de uma vez.
Mantenha a ordem dos elementos restantes a mesma que na entrada.
>>> remove_duplicates([1, 2, 3, 2, 4])
[1, 3, 4]
HumanEval/27Tradução= Para uma determinada string, inverter caracteres minúsculos em maiúsculos e maiúsculos em minúsculos.
    >>> flip_case('Hello')
    'hELLO'
HumanEval/28Tradução= Concatenar lista de strings em uma única string
    >>> concatenar([])
    ''
    >>> concatenar(['a', 'b', 'c'])
    'abc'
HumanEval/29Tradução= Filtrar uma lista de strings de entrada apenas para aquelas que começam com um determinado prefixo.
    >>> filtrar_por_prefixo([], 'a')
    []
    >>> filtrar_por_prefixo(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
HumanEval/30Tradução= Retorne apenas números positivos na lista.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
     .
HumanEval/31Tradução= Retorne verdadeiro se um determinado número for primo e falso caso contrário.
   >>> is_prime(6)
   Falso
   >>> is_prime(101)
   Verdadeiro
   >>> is_prime(11)
   Verdadeiro
   >>> is_prime(13441)
   Verdadeiro
   >>> is_prime(61)
   Verdadeiro
   >>> is_prime(4)
   Falso
   >>> is_prime(1)
   Falso
   .
HumanEval/32Tradução= Avalia um polinômio com coeficientes xs no ponto x.
    Retorna xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
     .
HumanEval/33Tradução= Esta função recebe uma lista l e retorna uma lista l' tal que
l' é idêntica a l nos índices que não são divisíveis por três, enquanto seus valores nos índices que são divisíveis por três são iguais
aos valores dos índices correspondentes de l, mas ordenados.
>>> sort_third([1, 2, 3])
[1, 2, 3]
>>> sort_third([5, 6, 3, 4, 8, 9, 2])
[2, 6, 3, 4, 8, 9, 5]
HumanEval/34Tradução= Retorne elementos únicos ordenados em uma lista
    >>> unicos([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
     .
HumanEval/35Tradução= Retorne o elemento máximo na lista.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    .
HumanEval/36Tradução= Retorne o número de vezes que o dígito 7 aparece em números inteiros menores que n que são divisíveis por 11 ou 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
     .
